name: "Analysis with SonarCloud and package for Windows, Linux, MacOS"

on:
  push:
    branches: [ "main" ]

permissions: # added using https://github.com/step-security/secure-repo
  contents: read

jobs:
  package_for_linux:
    name: Package for Linux and Analyze with SonarCloud
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Install JDK
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
        with:
          distribution: 'temurin'
          java-version: '21'
          check-latest: true
          cache: 'maven'
      - name: Verify Java Installation
        run: java -version
      - name: Install Xvfb
        run: sudo apt-get install -y xvfb
      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1920x1080x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
      - name: Compile, Test, Package, and analyze with Maven profile (Linux)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B package -P linux -f pom.xml org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Lob2018_SudoFX2024 -Dsonar.qualitygate.wait=true -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      - name: Upload output folder (Linux)
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: output-folder-linux
          path: output

  package_for_windows:
    name: Package for Windows
    needs: [ package_for_linux ]
    runs-on: windows-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install JDK
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
        with:
          distribution: 'temurin'
          java-version: '21'
          check-latest: true
          cache: 'maven'

      - name: Verify Java Installation
        run: java -version
        shell: cmd

      - name: Cache WiX Toolset
        uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
        with:
          path: wix311.exe
          key: ${{ runner.os }}-wix311

      - name: Install WiX Toolset
        run: |
          if (!(Test-Path wix311.exe)) {
              Write-Host "wix311.exe is downloaded."
              $url = 'https://github.com/wixtoolset/wix3/releases/download/wix3111rtm/wix311.exe'
              $output = 'wix311.exe'
              Invoke-WebRequest -Uri $url -OutFile $output
              Start-Process -FilePath $output -ArgumentList '/quiet' -Wait -NoNewWindow
          } else {
              Write-Host "wix311.exe is in the cache."
          }

      - name: Add WiX Toolset to PATH
        run: |
          $newPath = 'C:\Program Files (x86)\WiX Toolset v3.11\bin'
          $currentPath = [Environment]::GetEnvironmentVariable('PATH', 'Machine')
          [Environment]::SetEnvironmentVariable('PATH', "$newPath;$currentPath", 'Machine')

      - name: Compile, Test, and Package with Maven
        run: mvn package -f pom.xml

      - name: Upload output folder
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: output-folder-windows
          path: output

  package_for_macos:
    name: Package for MacOS
    needs: [ package_for_linux ]
    runs-on: macos-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Install JDK
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
        with:
          distribution: 'temurin'
          java-version: '21'
          check-latest: true
          cache: 'maven'
      - name: Verify Java Installation
        run: java -version
      - name: Install Xvfb
        run: brew install XQuartz
      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1920x1080x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
      - name: Compile, Test, and Package with Maven (macOS)
        run: mvn package -P mac -f pom.xml
      - name: Upload output folder (macOS)
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: output-folder-macos
          path: output

  package_for_macos_x86_64:
    name: Package for MacOS x86_64
    needs: [ package_for_linux ]
    runs-on: macos-13
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Install JDK
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
        with:
          distribution: 'temurin'
          java-version: '21'
          check-latest: true
          cache: 'maven'
      - name: Verify Java Installation
        run: java -version
      - name: Install Xvfb
        run: brew install XQuartz
      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1920x1080x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
      - name: Compile, Test, and Package with Maven (macOS)
        run: mvn package -P mac-x86_64 -f pom.xml
      - name: Upload output folder (macOS-x86_64)
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: output-folder-macos-x86_64
          path: output

  publish_release:
    permissions:
      contents: write  # for ncipollo/release-action to create a release
    name: Publish the release and tag it
    needs: [ package_for_windows, package_for_linux, package_for_macos, package_for_macos_x86_64 ]
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Extract version
        run: echo "POM_VERSION=$(cat pom.xml | grep -oPm1 '(?<=<version>)[^<]+')" >> $GITHUB_ENV
      - name: Download output folder (Windows)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: output-folder-windows
          path: output
      - name: Download output folder (Linux)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: output-folder-linux
          path: output
      - name: Download output folder (MacOS)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: output-folder-macos
          path: output
      - name: Download output folder (MacOS-x86_64)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: output-folder-macos-x86_64
          path: output
      - name: Create Release
        uses: ncipollo/release-action@cdcc88a9acf3ca41c16c37bb7d21b9ad48560d87 # v1.15.0
        with:
          name: SudokuFX release v${{ env.POM_VERSION }}
          tag: v${{ env.POM_VERSION }}
          body: |
            **MSI, DMG, and DEB Files:** These installation packages include the Java Runtime Environment (JRE) and will automatically install the application on your machine:
            
            - **Windows MSI**: `SudokuFX_JVM-${{ env.POM_VERSION }}.msi`
            - **Linux DEB**: `sudokufx-jvm_${{ env.POM_VERSION }}_amd64.deb`
            - **macOS DMG**: `SudokuFX-JVM-${{ env.POM_VERSION }}.dmg` or `SudokuFX-x86_64-JVM-${{ env.POM_VERSION }}.dmg`<br>
            
            [![Windows MSI](https://img.shields.io/badge/Windows_MSI-SudokuFX__JVM--${{ env.POM_VERSION }}.msi-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX_JVM-${{ env.POM_VERSION }}.msi)
            [![Linux DEB](https://img.shields.io/badge/Linux_DEB-sudokufx--jvm__${{ env.POM_VERSION }}__amd64.deb-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/sudokufx-jvm_${{ env.POM_VERSION }}_amd64.deb)
            [![macOS DMG](https://img.shields.io/badge/macOS_DMG-SudokuFX--JVM--${{ env.POM_VERSION }}.dmg-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-JVM-${{ env.POM_VERSION }}.dmg)
            [![macOS DMG x86_64](https://img.shields.io/badge/macOS_DMG_x86__64-SudokuFX--x86__64--JVM--${{ env.POM_VERSION }}.dmg-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-x86_64-JVM-${{ env.POM_VERSION }}.dmg)<br>
            
            **Windows, macOS, and Linux ZIP/TAR Files:** These compressed files do not include the Java Runtime Environment (JRE). You must have the latest JRE installed on your machine. To launch the application, use the following scripts:
            
            - **Windows**: `SudokuFX-${{ env.POM_VERSION }}_windows.zip` (Launch with .bat file)
            - **Linux**: `SudokuFX-${{ env.POM_VERSION }}_linux.tar.gz` (Launch with .sh file)
            - **macOS**: `SudokuFX-${{ env.POM_VERSION }}_macos.zip` or `SudokuFX-${{ env.POM_VERSION }}-x86_64_macos.zip` (Launch with .sh file)<br>
            
            [![Windows ZIP](https://img.shields.io/badge/SudokuFX--${{ env.POM_VERSION }}__windows.zip-Launch_with_.bat_file-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-${{ env.POM_VERSION }}_windows.zip)
            [![Linux TAR](https://img.shields.io/badge/SudokuFX--${{ env.POM_VERSION }}__linux.tar.gz-Launch_with_.sh_file-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-${{ env.POM_VERSION }}_linux.tar.gz)
            [![macOS ZIP](https://img.shields.io/badge/SudokuFX--${{ env.POM_VERSION }}__macos.zip-Launch_with_.sh_file-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-${{ env.POM_VERSION }}_macos.zip)
            [![macOS ZIP x86_64](https://img.shields.io/badge/SudokuFX--${{ env.POM_VERSION }}--x86__64__macos.zip-Launch_with_.sh_file-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/SudokuFX-${{ env.POM_VERSION }}-x86_64_macos.zip)<br>
            
            **File Fingerprints:** The integrity of the downloaded files can be verified using the corresponding hash files:
            
            - `hash_windows.txt` (for Windows)
            - `hash_linux.txt` (for Linux)
            - `hash_macos.txt` or `hash_macos-x86_64.txt` (for macOS)<br>
            
            [![hash_windows.txt](https://img.shields.io/badge/hash__windows.txt-(for_Windows)-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/hash_windows.txt)
            [![hash_linux.txt](https://img.shields.io/badge/hash__linux.txt-(for_Linux)-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/hash_linux.txt)
            [![hash_macos.txt](https://img.shields.io/badge/hash__macos.txt-(for_macOS)-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/hash_macos.txt)
            [![hash_macos-x86_64.txt](https://img.shields.io/badge/hash__macos--x86__64.txt-(for_macOS_x86__64)-brightgreen.svg)](https://github.com/Lob2018/SudokuFX/releases/download/v${{ env.POM_VERSION }}/hash_macos-x86_64.txt)
          artifacts: 'output/*'
      - name: Create Tag
        run: git tag v${{ env.POM_VERSION }}
      - name: Push Tag
        run: git push --tags
